name: auto-deploy sing-box via cloudflared

on:
  schedule:
    - cron: '0 */4 * * *'  # every 4 hours
  workflow_dispatch:

jobs:
  poll:
    name: Poll latest sing-box prerelease
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get.outputs.tag }}
      prerelease: ${{ steps.get.outputs.pr }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Get latest prerelease info
        id: get
        run: |
          # 拉取所有 release，再挑出 prerelease
          info=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases)
          tag=$(echo "$info" \
            | jq -r '[.[] | select(.prerelease == true)][0].tag_name')
          pr=$(echo "$info" \
            | jq -r '[.[] | select(.prerelease == true)][0].prerelease')

          if [ -z "$tag" ] || [ "$pr" != "true" ]; then
            echo "No prerelease found, or API error. Exiting."
            exit 0
          fi

          # 写输出
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "pr=$pr"   >> $GITHUB_OUTPUT

      - name: Check last deployed tag
        id: check
        run: |
          DEPLOYED_FILE=sing-box/last_deployed_tag
          last=""
          [ -f "$DEPLOYED_FILE" ] && last=$(<"$DEPLOYED_FILE")

          echo "Last deployed: $last"
          if [ "$last" != "${{ steps.get.outputs.tag }}" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build sing-box binaries
    needs: poll
    if: needs.poll.outputs.prerelease == 'true' && needs.poll.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: linux-amd64
            goos: linux
            goarch: amd64
            goamd64: v1
            artifact: sing-box-linux-amd64
          - name: linux-amd64-v3
            goos: linux
            goarch: amd64
            goamd64: v3
            artifact: sing-box-linux-amd64-v3
          - name: linux-arm64
            goos: linux
            goarch: arm64
            artifact: sing-box-linux-arm64
    steps:
      - name: Checkout sing-box @ ${{ needs.poll.outputs.tag }}
        uses: actions/checkout@v3
        with:
          repository: SagerNet/sing-box
          ref: ${{ needs.poll.outputs.tag }}
          fetch-depth: 0

      - name: Get Go version
        id: version
        run: |
          echo go_version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json \
            | grep -oE '"version": "[0-9]+\.[0-9]+(\.[0-9]+)?"' \
            | head -1 | cut -d':' -f2 | tr -d ' "') >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.version.outputs.go_version }}

      - name: Build ${{ matrix.name }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          CGO_ENABLED: 0
          TAGS: with_quic,with_gvisor,with_wireguard,with_utls,with_clash_api
        run: make

      - name: Compress ${{ matrix.name }}
        run: upx sing-box

      - name: Upload ${{ matrix.name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: sing-box

  deploy:
    needs: build
    if: needs.poll.outputs.prerelease == 'true' && needs.poll.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        host_idx: [0,1,2,3,4]
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      CF_TOKEN_ID: ${{ secrets.CLOUDFLARED_TOKEN_ID }}
      CF_TOKEN_SECRET: ${{ secrets.CLOUDFLARED_TOKEN_SECRET }}
      PUSHOVER_TOKEN: ${{ secrets.PUSHOVER_APP_AU }}
      PUSHOVER_USER: ${{ secrets.PUSHOVER_USER }}
      # 通过条件表达式，从对应的 secret 中选出当前主机的地址
      HOST: ${{ matrix.host_idx == 0 && secrets.SSH_HOST_0
               || matrix.host_idx == 1 && secrets.SSH_HOST_1
               || matrix.host_idx == 2 && secrets.SSH_HOST_2
               || matrix.host_idx == 3 && secrets.SSH_HOST_3
               || secrets.SSH_HOST_4 }}
    steps:
      - name: Download artifact for host ${{ matrix.host_idx }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.host_idx == 0 && 'sing-box-linux-arm64'
                  || matrix.host_idx == 1 && 'sing-box-linux-amd64-v3'
                  || 'sing-box-linux-amd64' }}
          path: ./deploy

      - name: Deploy via cloudflared SSH Action
        uses: and-fm/cloudflared-ssh-action@v3
        with:
          host: ${{ env.HOST }}
          username: ${{ env.SSH_USER }}
          private_key_filename: id_ed25519
          private_key_value: ${{ secrets.SSH_PRIVATE_KEY }}
          service_token_id: ${{ env.CF_TOKEN_ID }}
          service_token_secret: ${{ env.CF_TOKEN_SECRET }}
          commands: |
            rsync -az --delete ./deploy/sing-box ${SSH_USER}@${HOST}:/opt/sing-box/sing-box.new
            ssh ${SSH_USER}@${HOST} "bash -e <<'EOF'
              cp /opt/sing-box/sing-box /opt/sing-box/sing-box.bkup
              mv /opt/sing-box/sing-box.new /opt/sing-box/sing-box
              if /opt/sing-box/sing-box check -c /opt/sing-box/config.json; then
                service sing-box restart
              else
                mv /opt/sing-box/sing-box.bkup /opt/sing-box/sing-box
                curl -s --form-string "token=$PUSHOVER_TOKEN" --form-string "user=$PUSHOVER_USER" \
                  --form-string "title=Deploy failed on $(hostname)" --form-string "html=1" \
                  --form-string "message=<b>sing-box update failed</b><br>Host: $(hostname)" \
                  https://api.pushover.net/1/messages.json
                exit 1
              fi
            EOF"

      - name: Record deployed tag
        if: success()
        run: |
          echo "${{ needs.poll.outputs.tag }}" > sing-box/last_deployed_tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add sing-box/last_deployed_tag
          git commit -m "Record deployed tag ${{ needs.poll.outputs.tag }}"
          git push
