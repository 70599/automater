name: auto-deploy sing-box via cloudflared

on:
  schedule:
    - cron: '0 */4 * * *'  # every 4 hours

jobs:
  poll:
    name: Poll latest sing-box prerelease
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get.outputs.tag }}
      prerelease: ${{ steps.get.outputs.pr }}
    steps:
      - name: Get latest release info
        id: get
        run: |
          info=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases?per_page=1)
          tag=$(echo "$info" | jq -r '.[0].tag_name')
          pr=$(echo "$info" | jq -r '.[0].prerelease')
          echo "::set-output name=tag::$tag"
          echo "::set-output name=pr::$pr"

      - name: Stop if not prerelease
        if: ${{ steps.get.outputs.pr != 'true' }}
        run: |
          echo "Latest release (${{ steps.get.outputs.tag }}) is not a prerelease. Exiting."
          exit 0

  build:
    name: Build sing-box binaries
    needs: poll
    if: needs.poll.outputs.prerelease == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: linux-amd64
            goos: linux
            goarch: amd64
            goamd64: v1
            artifact: sing-box-linux-amd64
          - name: linux-amd64-v3
            goos: linux
            goarch: amd64
            goamd64: v3
            artifact: sing-box-linux-amd64-v3
          - name: linux-arm64
            goos: linux
            goarch: arm64
            artifact: sing-box-linux-arm64
    steps:
      - name: Checkout sing-box @ ${{ needs.poll.outputs.tag }}
        uses: actions/checkout@v3
        with:
          repository: SagerNet/sing-box
          ref: ${{ needs.poll.outputs.tag }}
          fetch-depth: 0

      - name: Get Go version
        id: version
        run: |
          echo go_version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json \
            | grep -oE '"version": "[0-9]+\.[0-9]+(\.[0-9]+)?"' \
            | head -1 | cut -d':' -f2 | tr -d ' "') >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.version.outputs.go_version }}

      - name: Build ${{ matrix.name }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          CGO_ENABLED: 0
          TAGS: with_quic,with_gvisor,with_wireguard,with_utls,with_clash_api
        run: make

      - name: Compress ${{ matrix.name }}
        run: upx sing-box

      - name: Upload ${{ matrix.name }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact }}
          path: sing-box

  deploy:
    name: Deploy to VPS via cloudflared
    needs: build
    if: needs.poll.outputs.prerelease == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        host_idx: [0,1,2,3,4]
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      CF_TOKEN_ID: ${{ secrets.CLOUDFLARED_TOKEN_ID }}
      CF_TOKEN_SECRET: ${{ secrets.CLOUDFLARED_TOKEN_SECRET }}
      PUSHOVER_TOKEN: ${{ secrets.PUSHOVER_APP_AU }}
      PUSHOVER_USER: ${{ secrets.PUSHOVER_USER }}
    steps:
      - name: Download amd64 artifact
        if: ${{ matrix.host_idx != 0 }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.host_idx == 1 && 'sing-box-linux-amd64-v3' || 'sing-box-linux-amd64' }}
          path: ./deploy

      - name: Download arm64 artifact
        if: ${{ matrix.host_idx == 0 }}
        uses: actions/download-artifact@v3
        with:
          name: sing-box-linux-arm64
          path: ./deploy

      - name: Prepare SSH config
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519 ~/.ssh/known_hosts
          cat <<EOF > ~/.ssh/config
          Host vps
            HostName ${{ secrets['SSH_HOST_' + matrix.host_idx] }}
            User $SSH_USER
            ProxyCommand /opt/bin/cloudflared access ssh \
              --hostname %h \
              --service-token-id $CF_TOKEN_ID \
              --service-token-secret $CF_TOKEN_SECRET
          EOF
          chmod 600 ~/.ssh/config

      - name: Rsync binary
        run: |
          rsync -az --delete ./deploy/sing-box vps:/opt/sing-box/sing-box.new

      - name: Post-deploy check & finalize
        run: |
          ssh vps bash -e <<'EOF'
            cp /opt/sing-box/sing-box /opt/sing-box/sing-box.bkup || true
            mv /opt/sing-box/sing-box.new /opt/sing-box/sing-box
            if /opt/sing-box/sing-box check -c /opt/sing-box/config.json; then
              service sing-box restart
            else
              mv /opt/sing-box/sing-box.bkup /opt/sing-box/sing-box
              curl -s \
                --form-string "token=$PUSHOVER_TOKEN" \
                --form-string "user=$PUSHOVER_USER" \
                --form-string "title=$(hostname) 上的 sing-box 部署失败" \
                --form-string "html=1" \
                --form-string "message=<b>sing-box 部署失败</b><br>主机: $(hostname)" \
                https://api.pushover.net/1/messages.json
              exit 1
            fi
          EOF
