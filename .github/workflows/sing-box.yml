name: deploy sing-box via cloudflared

on:
  schedule:
    - cron: '0 21 * * *'    # 每天凌晨 05:00
  workflow_dispatch:
    inputs:
      filter:
        type: choice
        description: 'Which type of release to deploy?'
        options:
          - prerelease
          - release

jobs:
  poll:
    name: Poll latest sing-box release
    runs-on: ubuntu-latest
    env:
      FILTER: ${{ github.event.inputs.filter || 'release' }}
    outputs:
      tag: ${{ steps.get.outputs.tag }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get latest ${{ env.FILTER }} info
        id: get
        run: |
          info=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases)
          if [ "$FILTER" = "prerelease" ]; then
            tag=$(echo "$info" | jq -r '[.[] | select(.prerelease==true)][0].tag_name')
          else
            tag=$(echo "$info" | jq -r '[.[] | select(.prerelease==false)][0].tag_name')
          fi

          if [ -z "$tag" ]; then
            echo "No matching $FILTER found, exiting."
            exit 0
          fi

          echo "Found tag: $tag"
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Check last deployed tag
        id: check
        run: |
          DEPLOYED_FILE=sing-box/last_deployed_tag
          last=""
          [ -f "$DEPLOYED_FILE" ] && last=$(<"$DEPLOYED_FILE")
          echo "Last deployed: $last"

          if [ "$last" != "${{ steps.get.outputs.tag }}" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build sing-box binaries
    needs: poll
    if: needs.poll.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: linux-amd64
            goos: linux
            goarch: amd64
            goamd64: v1
            artifact: sing-box-linux-amd64
          - name: linux-amd64-v3
            goos: linux
            goarch: amd64
            goamd64: v3
            artifact: sing-box-linux-amd64-v3
          - name: linux-arm64
            goos: linux
            goarch: arm64
            artifact: sing-box-linux-arm64
    steps:
      - name: Checkout sing-box @ ${{ needs.poll.outputs.tag }}
        uses: actions/checkout@v4
        with:
          repository: SagerNet/sing-box
          ref: ${{ needs.poll.outputs.tag }}
          fetch-depth: 0

      - name: Get Go version
        id: version
        run: |
          echo go_version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json \
            | grep -oE '"version": "[0-9]+\.[0-9]+(\.[0-9]+)?"' \
            | head -1 | cut -d':' -f2 | tr -d ' "') >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.version.outputs.go_version }}

      - name: Build ${{ matrix.name }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          CGO_ENABLED: 0
          TAGS: with_quic,with_gvisor,with_wireguard,with_utls,with_clash_api
        run: make

      - name: Compress ${{ matrix.name }}
        run: upx sing-box

      - name: Upload ${{ matrix.name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: sing-box

  deploy:
    needs: [poll, build]
    if: needs.poll.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./deploy

      - name: Install cloudflared
        run: |
          mkdir -p /opt/bin
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 \
            -o /opt/bin/cloudflared
          chmod +x /opt/bin/cloudflared

      - name: Prepare SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519 ~/.ssh/known_hosts

      - name: Bypass Cloudflare for GitHub Action
        uses: xiaotianxt/bypass-cloudflare-for-github-action@v1.1.1
        with:
          cf_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          cf_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy sequentially to all hosts
        env:
          CF_TOKEN_ID: ${{ secrets.CLOUDFLARED_TOKEN_ID }}
          CF_TOKEN_SECRET: ${{ secrets.CLOUDFLARED_TOKEN_SECRET }}
          PUSHOVER_TOKEN: ${{ secrets.PUSHOVER_APP_AU }}
          PUSHOVER_USER: ${{ secrets.PUSHOVER_USER }}
        run: |
          set -e
          hosts=("${{ secrets.SSH_HOST_0 }}" "${{ secrets.SSH_HOST_1 }}" "${{ secrets.SSH_HOST_2 }}" "${{ secrets.SSH_HOST_3 }}" "${{ secrets.SSH_HOST_4 }}")
          artifacts=("sing-box-linux-arm64" "sing-box-linux-amd64" "sing-box-linux-amd64-v3" "sing-box-linux-amd64" "sing-box-linux-amd64-v3")

          for i in "${!hosts[@]}"; do
            host="${hosts[$i]}"
            artifact="${artifacts[$i]}"

            echo ">>> Deploying to $host with artifact $artifact"

            echo "Host vps" > ~/.ssh/config
            echo "  HostName $host" >> ~/.ssh/config
            echo "  User ${{ secrets.SSH_USER }}" >> ~/.ssh/config
            echo "  ProxyCommand /opt/bin/cloudflared access ssh --hostname %h --service-token-id $CF_TOKEN_ID --service-token-secret $CF_TOKEN_SECRET" >> ~/.ssh/config
            chmod 600 ~/.ssh/config

            # 上传 artifact
            rsync -avzP --delete "./deploy/$artifact/sing-box" vps:/opt/sing-box/sing-box.new

            # 远程检查并替换
            ssh vps bash -c "
              [ -x /opt/sing-box/sing-box.new ] || chmod +x /opt/sing-box/sing-box.new
              if /opt/sing-box/sing-box.new check -c /opt/sing-box/config.json; then
                mv -f /opt/sing-box/sing-box /opt/sing-box/sing-box.bkup
                mv -f /opt/sing-box/sing-box.new /opt/sing-box/sing-box
                service sing-box restart
              else
                rm -rf /opt/sing-box/sing-box.new
                curl -s \
                  --form-string \"token=$PUSHOVER_TOKEN\" \
                  --form-string \"user=$PUSHOVER_USER\" \
                  --form-string \"title=$(hostname) 上的新版 sing-box 不兼容现有配置文件\" \
                  --form-string \"html=1\" \
                  --form-string \"message=$(hostname) 上的新版 sing-box 不兼容现有配置文件\" \
                  https://api.pushover.net/1/messages.json
              fi
            "

            echo ">>> Completed $host"
          done

  record:
    needs: [poll, deploy]
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.poll.outputs.tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Record deployed tag
        run: |
          if [ -n "$TAG" ]; then
            echo "$TAG" > sing-box/last_deployed_tag
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add sing-box/last_deployed_tag
            git commit -m "Record deployed tag $TAG"
            git push
          fi
